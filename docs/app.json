[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nfrom palmerpenguins import load_penguins # This package provides the Palmer Penguins dataset\nimport pandas as pd \nimport seaborn as sns\nfrom shiny import reactive, render, req\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = load_penguins()\n\n#name the page\nui.page_opts(title=\"Desiree's Penguin Data\", fillable=True)\n\n\n# Add a Shiny UI sidebar for user interaction\nwith ui.sidebar(open=\"open\"):  # Set the open parameter to \"open\" to make the sidebar open by default\n    # Add a second-level header to the sidebar\n    ui.h5(\"Sidebar\")\n\n# Use ui.input_selectize() to create a dropdown input to choose a column\n    ui.input_selectize(\n        \"selected_attribute\", \n        \"Select Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n    )\n\n# Use ui.input_numeric() to create a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Number of Plotly Histogram Bins\", 40)\n\n# Use ui.input_slider() to create a slider input for the number of Seaborn bins\n    ui.input_slider(\"seaborn_bin_count\", \"Number of Seaborn Bins\", 1, 40, 20)\n\n# Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n    ui.input_checkbox_group(\n        \"selected_species_list\", \n        \"Select Species\", \n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"], \n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"], \n        inline=False\n    )\n\n# Create checkbox group for island selection\n    ui.input_checkbox_group(\n        \"selected_island_list\", \n        \"Filter by Island:\", \n                            choices=[\"Torgersen\", \"Biscoe\", \"Dream\"], \n                            selected=[\"Torgersen\", \"Biscoe\", \"Dream\"], inline=True)    \n\n# Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr()\n\n# Use ui.a() to add a hyperlink to Github\n    ui.a(\"GitHub\", href=\"https://github.com/dblake26/cintel-02-data\", target=\"_blank\")\n\n# When passing in multiple arguments to a function, separate them with commas.\n\n# Creates a DataTable showing all data\n\n# Main content\nwith ui.layout_columns():\n    with ui.card(full_screen=True):  \n        ui.h6(\"Penguins Data Table\")\n\n        @render.data_frame\n        def penguins_data_table():\n            return render.DataTable(filtered_data())\n            \n    with ui.card(full_screen=True):\n        ui.h6(\"Penguins Data Grid\")\n\n        @render.data_frame\n        def penguins_data_grid():\n            return render.DataGrid(filtered_data())\n# added a horizontal rule\nui.hr()\n\nwith ui.layout_columns():\n# Creates a Plotly Histogram showing all species\n    with ui.card(full_screen=True):\n        ui.h6(\"Species Plotly Histogram\")\n    \n        @render_plotly\n        def plotly_histogram():\n            return px.histogram(\n                filtered_data(), \n                x=input.selected_attribute(), \n                nbins=input.plotly_bin_count()\n        )\n\n# Creates a Seaborn Histogram showing all species\n\n    with ui.card(full_screen=True):\n        ui.h6(\"Seaborn Histogram\")\n\n        @render.plot(alt=\"Seaborn Histogram\")\n        def seaborn_histogram():\n            histplot = sns.histplot(\n                data=filtered_data(), \n                x=\"body_mass_g\",\n                bins=input.seaborn_bin_count())\n            \n            histplot.set_title(\"Palmer Penguins\")\n            histplot.set_ylabel(\"Measurement\")\n\n# Creates a Plotly Scatterplot showing all species\n\n    with ui.card(full_screen=True):\n        ui.h6(\"Plotly Scatterplot: Species\")\n\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(filtered_data(),\n                x=\"flipper_length_mm\",\n                y=\"body_mass_g\",\n                color=\"species\",\n                hover_name=\"island\",\n                labels={\n                    \"flipper_length_mm\": \"Flipper Length (mm)\",\n                    \"body_mass_g\": \"Body Mass (g)\",\n                    \"species\": \"Species\",\n                    \"bill_length_mm\": \"Bill Length (mm)\",\n                    \"island\": \"Island\"\n            },\n            title=\"Penguin Species Measurements\",\n            size_max=12\n        )\n            # ---------\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    return penguins_df\n", "type": "text"}]